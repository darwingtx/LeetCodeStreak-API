// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== USERS ====================
model User {
  id       String   @id @default(uuid())
  username String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // LeetCode data
  profileUrl          String? @map("profile_url")
  profilePictureUrl   String? @map("profile_picture_url")
  
  // Extended LeetCode profile
  realName            String? @map("real_name")
  githubUrl           String? @map("github_url")
  linkedinUrl         String? @map("linkedin_url")
  twitterUrl          String? @map("twitter_url")
  countryName         String? @map("country_name")
  birthday           DateTime? @map("birthday")
  school              String? @map("school")
  company             String? @map("company")
  websiteUrl         String[] @map("website_url")
  ranking             Int?    @map("ranking")
  reputation          Int?    @default(0)
  skillTags           String[] @map("skill_tags")
  aboutMe             String? @db.Text @map("about_me")
  
  // Submission stats
  totalSubmissions    Int @default(0) @map("total_submissions")
  acceptedSubmissions Int @default(0) @map("accepted_submissions")
  easyCount           Int @default(0) @map("easy_count")
  mediumCount         Int @default(0) @map("medium_count")
  hardCount           Int @default(0) @map("hard_count")

  // Streak cache (calculated fields)
  currentStreak         Int       @default(0) @map("current_streak")
  longestStreak         Int       @default(0) @map("longest_streak")
  lastProblemSolvedAt   DateTime? @map("last_problem_solved_at")
  totalProblemsSolved   Int       @default(0) @map("total_problems_solved")

  // Settings
  timezone                 String  @default("UTC")

  // Relations
  streakHistory   StreakHistory[]
  userGroups      UserGroup[]
  adminOfGroups   Group[]         @relation("GroupAdmin")

  @@map("users")
  UserSubmission UserSubmission[]
  SyncLog SyncLog[]
}

model UserSubmission {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  
  // Submission data from LeetCode API
  title         String
  titleSlug     String   @map("title_slug") // Unix timestamp as string from API
  submittedAt   DateTime @map("submitted_at") // Converted timestamp
  statusDisplay String   @map("status_display") // "Accepted", "Wrong Answer", etc
  language      String
  difficulty    String?  // If we can determine it
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, titleSlug, submittedAt])
  @@index([userId, submittedAt(sort: Desc)])
  @@index([userId, statusDisplay, submittedAt])
  @@map("user_submissions")
}



// ==================== STREAK HISTORY ====================
model StreakHistory {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  date            DateTime  @db.Date
  problemsSolved  Int       @default(0) @map("problems_solved")
  firstProblemAt  DateTime? @map("first_problem_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date(sort: Desc)])
  @@map("streak_history")
}

// ==================== GROUPS ====================
model Group {
  id          String   @id @default(uuid())
  name        String
  description String?  @db.Text
  adminId     String   @map("admin_id")
  createdAt   DateTime @default(now()) @map("created_at")
  isPrivate   Boolean  @default(false) @map("is_private")
  inviteCode  String?  @unique @map("invite_code")

  // Racha actual y máxima
  currentStreak Int @default(0) @map("current_streak")
  longestStreak Int @default(0) @map("longest_streak")

  // Relaciones
  admin              User                @relation("GroupAdmin", fields: [adminId], references: [id], onDelete: Restrict)
  userGroups         UserGroup[]
  streakHistory      GroupStreakHistory[] // ← reemplaza a groupDailyActivity

  @@map("groups")
}


enum GroupRole {
  ADMIN
  MEMBER
}

// ==================== USER TO GROUP (MEMBERS) ====================
model UserGroup {
  id       String    @id @default(uuid())
  userId   String    @map("user_id")
  groupId  String    @map("group_id")
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now()) @map("joined_at")
  leftAt   DateTime? @map("left_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([groupId, role])
  @@map("user_groups")
}


enum GroupStreakStatus {
  COMPLETED   // El grupo mantuvo la racha ese día
  MISSED      // El grupo no completó la racha (la rompió)
  IN_PROGRESS // Día actual en curso (sin cerrar todavía)
}

// ==================== GROUP DAILY ACTIVITY ====================
model GroupStreakHistory {
  id                  String   @id @default(uuid())
  groupId             String   @map("group_id")
  date                DateTime @db.Date
  status              GroupStreakStatus  @default(IN_PROGRESS)
  streakValue         Int      @default(0) @map("streak_value")
  activeMembers       Int      @default(0) @map("active_members")
  totalProblemsSolved Int      @default(0) @map("total_problems_solved")

  // Relaciones
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, date])
  @@index([groupId, date(sort: Desc)])
  @@map("group_streak_history")
}


// ==================== SYNC LOGS ====================
model SyncLog {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  syncTime    DateTime @default(now()) @map("sync_time")
  status      String   @map("status") // 'success', 'error'
  errorMessage String? @map("error_message")
  apiRateLimitRemaining Int? @map("api_rate_limit_remaining")
  partialSyncOffset     String? @map("partial_sync_offset")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, syncTime(sort: Desc)])
  @@map("sync_logs")
}
